

<label for="first">Take</label>
<input type="number" id="first" placeholder="First" @oninput="OnFirstInput">
@*
<div>@_msg</div>

<div>after:@_after,before:_@_before,last:@_last,first:@_first</div>
<div>State:@_state.ToString()</div>
<div>next:@_next</div>*@

<UseGetCommands First="@_first" Before="@_before"  Last="@_last" After="@_after" Context="result">
    <ChildContent>
        <ul>
            @foreach (var item in result.CommandQuery.Commands.Edges)
            {
                <li>@item.Node.Name</li>
            }
        </ul>
        <button disabled="@(!result.CommandQuery.Commands.PageInfo.HasNextPage)"
                @onclick="() => SetNext(result.CommandQuery.Commands.PageInfo.EndCursor,
                result.CommandQuery.Commands.PageInfo.HasNextPage)">
            Next
        </button>
        <button disabled="@(!result.CommandQuery.Commands.PageInfo.HasPreviousPage)"
                @onclick="() => SetPrevious(result.CommandQuery.Commands.PageInfo.StartCursor,
                result.CommandQuery.Commands.PageInfo.HasNextPage)">
            Previous
        </button>
    </ChildContent>
    <LoadingContent>
        ...loading
    </LoadingContent>
</UseGetCommands>

@code {

    enum PagesState
    {
        Next,
        Previous
    }
    private string? _after = null;

    private string _msg = string.Empty;
    
    private int? _first=5;

    private PagesState _state = PagesState.Next;
    
    private int? _last = null;
    
    private string? _before = null;

    private bool _next;

    private void OnFirstInput(ChangeEventArgs e)
    {
        int.TryParse(e.Value.ToString(),out var value);

        if (value <= 0)
        {
            _msg = "Input error";
            return;
        }
        

        if (_state == PagesState.Next)
        {
            _first = value;
        }
        else
        {
            _last = value;
        }
        _msg = "";
    }


    private void SetNext(string endCursor,bool hasNextPage)
    {
        _after = endCursor;
        if (_last != null)
        {
            _first = _last;
        }
        _last=null;
        _before=null;
        _next = hasNextPage;
        _state = hasNextPage?PagesState.Next:PagesState.Previous;
    }

    private void SetPrevious(string startCursor,bool hasPreviousPage)
    {
        _before=startCursor;
        _last ??= _first;
        _first=null;
        _after=null;
        _state = hasPreviousPage?PagesState.Previous:PagesState.Next;
    }
    
    
}